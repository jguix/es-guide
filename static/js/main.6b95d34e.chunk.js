(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{122:function(e,t,n){},123:function(e,t,n){},124:function(e,t,n){},130:function(e,t,n){"use strict";n.r(t);var a=n(0),s=n.n(a),i=n(24),r=n.n(i),o=(n(39),n(6)),l=n(25),c=n(26),h=n(31),d=n(27),m=n(32),p=n(30),u=n.n(p),f=function(e){if(e)return s.a.createElement("ul",null,e.map(function(e){return s.a.createElement("li",{key:e.title},s.a.createElement("a",{href:"#".concat(e.tag)},e.title))}))},b=function(e){var t=e.sourceMap,n=Object(o.a)(t.values());if(n)return s.a.createElement(a.Fragment,null,s.a.createElement("h2",null,"Table of contents"),s.a.createElement("ul",null,n.map(function(e){return s.a.createElement("li",{key:e.title},s.a.createElement("a",{href:"#".concat(e.tag)},e.title),f(e.features))})))},g=n(28),w=n.n(g),y=(n(122),function(e){var t=e.hash,n=e.name;return s.a.createElement("p",{className:"codepen","data-height":"280","data-theme-id":"0","data-default-tab":"js,result","data-slug-hash":t,"data-pen-title":"variables"},s.a.createElement("span",null,"See the Pen"," ",s.a.createElement("a",{href:"https://codepen.io/sanders-vag/pen/".concat(t)},n)," by mimacom on ",s.a.createElement("a",{href:"https://codepen.io"},"CodePen"),"."))}),v=(n(123),function(e){var t=e.data;return s.a.createElement("div",null,s.a.createElement("a",{name:t.tag},s.a.createElement("h3",null,t.title)),s.a.createElement("hr",null),s.a.createElement("h4",null,"Description"),s.a.createElement(w.a,{source:t.description}),t.exampleHash&&s.a.createElement(a.Fragment,null,s.a.createElement("h4",null,"Example"),s.a.createElement("div",{className:"example"},s.a.createElement(y,{hash:t.exampleHash,name:t.title}))))}),E=function(e){var t=e.data;return s.a.createElement("div",null,t.map(function(e){return s.a.createElement("div",{key:e.title},s.a.createElement("a",{name:e.tag},s.a.createElement("h2",null,e.title)),e.features.map(function(e){return s.a.createElement(v,{key:e.title,data:e})})," ")}))},x=(n(124),n(29)),S=function(e){function t(){return Object(l.a)(this,t),Object(h.a)(this,Object(d.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(c.a)(t,[{key:"render",value:function(){var e=new Map(Object.entries(x)),t=Object(o.a)(e.values());return s.a.createElement(u.a,null,s.a.createElement("h1",null,"From ES2015 to ESNext"),s.a.createElement(b,{sourceMap:e}),s.a.createElement(E,{data:t}))}}]),t}(a.Component);Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));n(129);r.a.render(s.a.createElement(S,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},29:function(e){e.exports={es2015:{title:"ES2015/ES6",tag:"es2015",features:[{title:"Variables",description:"Before ES2015 variables were always declared as `var` and they had the scope of the function where they were defined. This means declaring a `var` outside a function means its scope is global. Declaring a var inside a block delimited by curly braces `{}`, did not create a new scope. \n\n #### let and const\n\n ES2015 introduces two new modifiers: `let` and `const` which have a more delimited scope. With `var` you could override the value of a variable defined global by declaring it again in your function. \n\n When defining a variable using **let**, its scope is limited to the block, statement or expression where it is defined.\n\n When defining a variable using **const**, its value can never changed. ",exampleHash:"ZPrOew",tag:"variables"},{title:"Arrow functions",description:"Arrow functions replace the traditional `function` syntax to simplify writing functions. \n\nThe syntax is very simple: `(args) => { content of the function }`. \n\nIf the function only has one single parameter, you can omit the parentheses.\n\n If the function has a single statement, you can omit the brackets, then the statement would be implicit returned. For instance: \n\n `const sum10 = number => number + 10;`",exampleHash:"xBYgYG",tag:"arrow-functions"},{title:"Classes",description:"ES2015 introduces classes as other programming languages. You can declare a class with the syntax `class MyClass` and you can create instances using `new MyClass()`. This also enables inheritance by using the keyword `extends`.\n\n You can define a constructor by defining the method `constructor` and it can accept arguments, otherwise the default constructor applies which does not accept any arguments.",exampleHash:"eXVgLq",tag:"classes"},{title:"Template literals",description:"Template literals is a new way of defining strings using backticks instead of quotes. For instance: \n\n ``const name=`Andrea` `` \n\n With template literals we can define multiline strings in a very simple way: \n\n ```\n const description=`this is \n the band of \n my childhood`\n ```\n\n Another useful advantage of template literals against traditional strings is the interpolation of variables. With this approach it is not necessary anymore to append strings using the `+` symbol, variables can be used inside the template literals wrapped by `${...}`: \n\n ```\n const name=`Andrea` \n const salutation=`Hi, my name is ${name}` \n``` ",exampleHash:"eXVGXj",tag:"template-literals"},{title:"Destructuring",description:"Destructuring is a quick mechanism to extract values from objects and arrays and save them in variables. The syntax is as follows: \n\n`const {name} = {name: 'John', age: 50}`\n\n This will extract the name from the object and store it in the variable `name`. The name of the resulting variable can be easily changed: \n\n`const {name: firstName} = {name: 'John', age: 50}`\n\n where the resulting variable with the content of the `name` would be `firstName`.\n\n Destructuring can be used in arrays as well, for instance: \n\n `const [first,second,,fifth] = [1,2,3,4,5]`\n\n The variables `first`, `second` and `fifth` will have `1`, `2` and `5` as values, respectively.",exampleHash:"LaQORE",tag:"destructuring"},{title:"Enhanced objects",description:"In ES2015 objects were enhanced with different features: \n\n#### Simpler syntax to include variables\n\n ```\n const colour = 'red'\n const redCar = { colour } //this is the same as const redCar = {colour: colour} \n```\n\n#### Prototype\n\n ```\n const animal = { isAnimal: true}\n const horse = {__proto__: animal} \n horse.isAnimal //true \n```\n\n#### super()\n\n Methods from the parent class can be called with the keyword `super`. \n\n ```\n const animal = { isAnimal: true, move: () => 'Moving'}\n const horse = {\n\t__proto__: animal, \n\tmove: super.move() + ' horse!'\n} \n```\n\n#### Dynamic properties \n\n```\n const x = { ['a' + 10 ]: 'brilliant' } \n x.a10 // brilliant\n```\n\n",exampleHash:"aMqEOZ",tag:"enhanced-objects"},{title:"ES modules syntax",description:"Modules can be imported with the syntax:\n\n `import package from 'module-name'`\n\n A package can be imported when is exported in its file. You can export as many packages as needed, for instance: \n\n ```\n const a = 'A'\nconst b= 'B'\n export {a,b}\n ```\n\n You can also set a package as default export with `export default`. This will impact the way one can later import these packages. \nA package declared as `export default Sample` will be imported as: \n\n`import Sample from './module'`\n\nHowever, a package declared as `export {Sample}` would be imported as:\n\n `import {Sample} from './module'`",exampleHash:"",tag:"es-modules"},{title:"For-of loop",description:"Besides the classic `for` and the `forEach`, ES2015 introduces the `for-of` as an improved `forEach` with the ability to break. \n\n ```\nfor (const i of [1,2,3) {\n console.log(i)\n} \n```",exampleHash:"",tag:"loop"},{title:"Strings and Objects",description:"Strings include the `repeat` method. \n\n `'Ho'.repeat(3) //hohoho`\n\n Objects include the `is()`, `assign()` and `setPrototypeOf`. \n\n `Object.is(a,b)` checks if two values are the same value\n `Object.assign()` shallow copies an object\n `Object.setPrototypeOf` sets an object prototype",exampleHash:"WmMdWv",tag:"strings-objects"},{title:"Spread Operator",description:"One of the most useful operators included by ES2015 is the spread operator `...`. With it one can expand arrays, objects and strings. \n\n #### Arrays \n\n ```\n const a = [1,2,3] \n const b = [...a, 4,5,6] //1,2,3,4,5,6\nconst [first, ...others]=[b] //first=1, others=[2,3,4,5,6] \n``` \n\n #### Objects \n\n ```\nconst a = {a: 1, b: 'c'}\n const b = {...a, i: false} // {a:1, b:'c', i:false}\n```\n\n #### Strings \n\n ```\nconst t='text'\n const array= [...t] // ['t','e','x','t']\n``` \n\nThis operator is useful to define a function argument as an array: \n\n ```\n const fn = (a,b,c) => a+b+c\n const array = [1,2,2]\n const result=fn(...array) // 5\n```",exampleHash:"OqQQmV",tag:"spread-operator"},{title:"Set",description:"ES2015 introduces the class `Set` which is a container of data. \n\nA `Set` can be created as a normal _class_, with `new Set()`, which will create an empty set. It is possible also to create a set with initial values with `new Set([1,2,3])`\n\nOne can _add_ and _delete_ items from a set with `mySet.add(1)` or `mySet.delete(1)`.\n\nOne can also check if an item is in the set wiht `mySet.has(1)` and check the size of a set with `mySet.size`.\n\nAll the items can be deleted from a set with `mySet.clear()`.\n\n A set has `values()` and `keys()` methods, both return an iterator with the values. ",exampleHash:"bZLxbm",tag:"set"},{title:"Map",description:"ES2015 introduces the class `Map` which is a container that stores data associated to a key. \n\nA `Map` can be created as a normal _class_, with `new Map()`, which will create an empty map. It is possible also to create a map with initial values with `new Map([[1, 'red'],[2, 'blue'],[3, 'green']])`\n\nOne can _add_ and _delete_ items from a map with `myMap.set(1)` or `myMap.delete(1)`.\n\nOne can also check if an item is in the map wiht `myMap.has(1)` and check the size of a map with `myMap.size`.\n\nAll the items can be deleted from a map with `myMap.clear()`.\n\n A map has `values()` and `keys()` methods that returns an iterator with the values and a list with the keys, respectively. ",exampleHash:"qvoZwv",tag:"map"}]},es2016:{title:"ES2016/ES7",features:[{title:"Array.prototype.includes()",description:"ES2016 incorporates a new method as part of the array prototype to determine whether a value is included in the array or not: `Array.prototype.includes()`",exampleHash:"pYLEYj",tag:"includes"},{title:"Exponientation operator",description:"Before ES2016 the exponientation was done with `Math.pow()`.\n\n Now the operator `**` natively calculates the exponent of a number, for instance: \n\n`const eight = 2**3 //8`",exampleHash:"WmzGqN",tag:"exponientation"}]},es2017:{title:"ES2017/ES8",features:[{title:"String padding",description:"Two new methods are included in the `String` object: `padStart` and `padEnd`. \n\n Padding means to add characters to a string until its length if the desired. Both methods accept as first argument the **desired length** for the string and, optionally, as a second parameter, the **character to be added** to the string. If the second parameter is not present, **blank spaces** will be added.",exampleHash:"jJzVPb",tag:"padding"},{title:"Object.values() & Object.entries()",description:"Two new methods can be found in Object: `entries` and `values`. \n\n`Object.values()` returns a list with the property values of a given object.\n\n`Object.entries()` returns a map with the property keys and values of a given object.\n\nNote that in arrays, the key will be the position in the array.",exampleHash:"KEoNzz",tag:"values-entries"},{title:"Asyncrhonous execution",description:"`await/async` improves the handling of asynchronous execution making them more readable than Promises. This new feature is built on Promises but it wraps up all the boilerplate code for us. \n\nJust add the keyword `await` before calling a method that returns a promise to use it. \n\nNote that the method within the `await` is used must be declared as `async`. This function will also return a promise.",exampleHash:"XGENaz",tag:"await-async"}]},es2018:{title:"ES2018/ES9",features:[{title:"Extended spread operator",description:"In ES2018 the spread operator is improved as one can use it together with destructuring to store the rest of the elements that are not extracted to named variables. For instance:\n\n ```\n const a = [1,2,3,4,5]\nconst {first, second, ...rest} = a //first=1, second=2, rest=[3,4,5]\n```\n\nIt also works with objects.",exampleHash:"bZvBOw",tag:"extended-spread"},{title:"Asyncrhonous iteration",description:"It is possible now to loop over an asynchronous iterator with the syntax `for await - of`. For example:\n\n ```\nfor await (const line of readLines(filePath)) {\n    console.log(line)\n}\n```",exampleHash:"",tag:"async-loop"}]},es2019:{title:"ES2019",features:[{title:"Flat & flatMap",description:"ES2019 introduces two new methods in the `Array` object: `flat` and `flatMap`. \n\n`flat` _flattens_ an array that has multiple dimensions. By default, it flattens to the first level, but the level can be passed as an argument to the function. Passing an `Infinity` is equivalent to unlimited levels.\n\n`flatMap` is a combination of `map` and `flat`. Useful when having a function that returns an array inside the `map` function but the desired output array needs to be flat.",exampleHash:"xBWqzq",tag:"flat"},{title:"Catch",description:"This feature allows to omit the exception on a `catch` block.",exampleHash:"bZvqKZ",tag:"catch"},{title:"Object.fromEntries()",description:"This method allows to build up an object from the map of entries. \n\n```\nconst entriesArray = [\n    ['size', 'M'],\n    ['colour', 'green'],\n    ['reference', '1999933ZE3']\n];\nconst tShirt = Object.fromEntries(entriesArray);// tShirt={size: 'M', colour: 'green', reference: '1999933ZE3'}\n```",exampleHash:"",tag:"from-entries"},{title:"Trim",description:"ES2019 introduces to methods to trim a string: `trimStart` and `trimEnd`. To trim means to remove blank characters from a string.\n\n`trimStart` will remove any blank character found at the beginnig of a string.\n\n`trimEnd` will remove any blank character found at the end of a string.\n\n```\nconst text = '   butter   ';\nconst a = text.trimStart() //a='butter   '\nconst b = text.trimEnd() //b='   butter'\n```",exampleHash:"NJYjNP",tag:"trim"}]}}},33:function(e,t,n){e.exports=n(130)},39:function(e,t,n){}},[[33,1,2]]]);
//# sourceMappingURL=main.6b95d34e.chunk.js.map