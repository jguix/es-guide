(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{122:function(e,t,n){},123:function(e,t,n){},124:function(e,t,n){},130:function(e,t,n){"use strict";n.r(t);var a=n(0),s=n.n(a),i=n(25),r=n.n(i),o=(n(39),n(6)),l=n(26),c=n(27),m=n(31),d=n(28),u=n(32),h=n(30),p=n.n(h),f=function(e){if(e)return s.a.createElement("ul",null,e.map(function(e){return s.a.createElement("li",{key:e.title},s.a.createElement("a",{href:"#".concat(e.tag)},e.title))}))},b=function(e){var t=e.sourceMap,n=Object(o.a)(t.values());if(n)return s.a.createElement(a.Fragment,null,s.a.createElement("h2",null,"Table of contents"),s.a.createElement("ul",null,n.map(function(e){return s.a.createElement("li",{key:e.title},s.a.createElement("a",{href:"#".concat(e.tag)},e.title),f(e.features))})))},g=n(12),y=n.n(g),E=(n(122),function(e){var t=e.hash,n=e.name;return s.a.createElement("p",{className:"codepen","data-height":"280","data-theme-id":"0","data-default-tab":"js,result","data-slug-hash":t,"data-pen-title":"variables"},s.a.createElement("span",null,"See the Pen"," ",s.a.createElement("a",{href:"https://codepen.io/sanders-vag/pen/".concat(t)},n)," by mimacom on ",s.a.createElement("a",{href:"https://codepen.io"},"CodePen"),"."))}),w=(n(123),function(e){var t=e.data;return t.exampleHash?s.a.createElement("div",null,s.a.createElement("a",{name:t.tag},s.a.createElement("h3",null,t.title)),s.a.createElement("hr",null),s.a.createElement("h4",null,"Description"),s.a.createElement(y.a,{source:t.description}),s.a.createElement("h4",null,"Example"),s.a.createElement("div",{className:"example"},s.a.createElement(E,{hash:t.exampleHash,name:t.title}))):s.a.createElement("div",null,s.a.createElement("a",{name:t.tag},s.a.createElement("h3",null,t.title)),s.a.createElement("hr",null),s.a.createElement("h4",null,"Description"),s.a.createElement(y.a,{source:t.description}))}),v=function(e){var t=e.data;return s.a.createElement("div",null,t.map(function(e){return s.a.createElement("div",{key:e.title},s.a.createElement("a",{name:e.tag},s.a.createElement("h2",null,e.title)),e.features.map(function(e){return s.a.createElement(w,{key:e.title,data:e})})," ")}))},x=(n(124),n(29)),S=function(e){function t(){return Object(l.a)(this,t),Object(m.a)(this,Object(d.a)(t).apply(this,arguments))}return Object(u.a)(t,e),Object(c.a)(t,[{key:"render",value:function(){var e=new Map(Object.entries(x)),t=Object(o.a)(e.values());return s.a.createElement(p.a,null,s.a.createElement("h1",null,"From ES2015 to ESNext"),s.a.createElement(b,{sourceMap:e}),s.a.createElement(v,{data:t}))}}]),t}(a.Component);Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));n(129);r.a.render(s.a.createElement(S,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},29:function(e){e.exports={es2015:{title:"ES2015/ES6",tag:"es2015",features:[{title:"Variables",description:"Before ES2015 variables were always declared as `var` and they had the scope of the function where they were defined. This means declaring a `var` outside a function means its scope is global. Declaring a var inside a block delimited by curly braces `{}`, did not create a new scope. \n\n #### let and const\n\n ES2015 introduces two new modifiers: `let` and `const` which have a more delimited scope. With `var` you could override the value of a variable defined global by declaring it again in your function. \n\n When defining a variable using **let**, its scope is limited to the block, statement or expression where it is defined.\n\n When defining a variable using **const**, its value can never changed. ",exampleHash:"ZPrOew",tag:"variables"},{title:"Arrow functions",description:"Arrow functions replace the traditional `function` syntax to simplify writing functions. \n\nThe syntax is very simple: `(args) => { content of the function }`. \n\nIf the function only has one single parameter, you can omit the parentheses.\n\n If the function has a single statement, you can omit the brackets, then the statement would be implicit returned. For instance: \n\n `const sum10 = number => number + 10;`",exampleHash:"xBYgYG",tag:"arrow-functions"},{title:"Classes",description:"ES2015 introduces classes as other programming languages. You can declare a class with the syntax `class MyClass` and you can create instances using `new MyClass()`. This also enables inheritance by using the keyword `extends`.\n\n You can define a constructor by defining the method `constructor` and it can accept arguments, otherwise the default constructor applies which does not accept any arguments.",exampleHash:"eXVgLq",tag:"classes"},{title:"Template literals",description:"Template literals is a new way of defining strings using backticks instead of quotes. For instance: \n\n ``const name=`Andrea` `` \n\n With template literals we can define multiline strings in a very simple way: \n\n ```\n const description=`this is \n the band of \n my childhood`\n ```\n\n Another useful advantage of template literals against traditional strings is the interpolation of variables. With this approach it is not necessary anymore to append strings using the `+` symbol, variables can be used inside the template literals wrapped by `${...}`: \n\n ```\n const name=`Andrea` \n const salutation=`Hi, my name is ${name}` \n``` ",exampleHash:"eXVGXj",tag:"template-literals"},{title:"Destructuring",description:"Destructuring is a quick mechanism to extract values from objects and arrays and save them in variables. The syntax is as follows: \n\n`const {name} = {name: 'John', age: 50}`\n\n This will extract the name from the object and store it in the variable `name`. The name of the resulting variable can be easily changed: \n\n`const {name: firstName} = {name: 'John', age: 50}`\n\n where the resulting variable with the content of the `name` would be `firstName`.\n\n Destructuring can be used in arrays as well, for instance: \n\n `const [first,second,,fifth] = [1,2,3,4,5]`\n\n The variables `first`, `second` and `fifth` will have `1`, `2` and `5` as values, respectively.",exampleHash:"LaQORE",tag:"destructuring"},{title:"Enhanced objects",description:"In ES2015 objects were enhanced with different features: \n\n#### Simpler syntax to include variables\n\n ```\n const colour = 'red'\n const redCar = { colour } //this is the same as const redCar = {colour: colour} \n```\n\n#### Prototype\n\n ```\n const animal = { isAnimal: true}\n const horse = {__proto__: animal} \n horse.isAnimal //true \n```\n\n#### super()\n\n Methods from the parent class can be called with the keyword `super`. \n\n ```\n const animal = { isAnimal: true, move: () => 'Moving'}\n const horse = {\n\t__proto__: animal, \n\tmove: super.move() + ' horse!'\n} \n```\n\n#### Dynamic properties \n\n```\n const x = { ['a' + 10 ]: 'brilliant' } \n x.a10 // brilliant\n```\n\n",exampleHash:"aMqEOZ",tag:"enhanced-objects"},{title:"ES modules syntax",description:"Modules can be imported with the syntax:\n\n `import package from 'module-name'`\n\n A package can be imported when is exported in its file. You can export as many packages as needed, for instance: \n\n ```\n const a = 'A'\nconst b= 'B'\n export {a,b}\n ```\n\n You can also set a package as default export with `export default`. This will impact the way one can later import these packages. \nA package declared as `export default Sample` will be imported as: \n\n`import Sample from './module'`\n\nHowever, a package declared as `export {Sample}` would be imported as:\n\n `import {Sample} from './module'`",exampleHash:"",tag:"es-modules"},{title:"For-of loop",description:"Besides the classic `for` and the `forEach`, ES2015 introduces the `for-of` as an improved `forEach` with the ability to break. \n\n ```\nfor (const i of [1,2,3) {\n console.log(i)\n} \n```",exampleHash:"",tag:"loop"},{title:"Strings and Objects",description:"Strings include the `repeat` method. \n\n `'Ho'.repeat(3) //hohoho`\n\n Objects include the `is()`, `assign()` and `setPrototypeOf`. \n\n `Object.is(a,b)` checks if two values are the same value\n `Object.assign()` shallow copies an object\n `Object.setPrototypeOf` sets an object prototype",exampleHash:"WmMdWv",tag:"strings-objects"},{title:"Spread Operator",description:"One of the most useful operators included by ES2015 is the spread operator `...`. With it one can expand arrays, objects and strings. \n\n #### Arrays \n\n ```\n const a = [1,2,3] \n const b = [...a, 4,5,6] //1,2,3,4,5,6\nconst [first, ...others]=[b] //first=1, others=[2,3,4,5,6] \n``` \n\n #### Objects \n\n ```\nconst a = {a: 1, b: 'c'}\n const b = {...a, i: false} // {a:1, b:'c', i:false}\n```\n\n #### Strings \n\n ```\nconst t='text'\n const array= [...t] // ['t','e','x','t']\n``` \n\nThis operator is useful to define a function argument as an array: \n\n ```\n const fn = (a,b,c) => a+b+c\n const array = [1,2,2]\n const result=fn(...array) // 5\n```",exampleHash:"OqQQmV",tag:"spread-operator"}]},es2016:{title:"ES2016/ES7",features:[{title:"Array.prototype.includes()",description:"",exampleHash:""},{title:"Pow",description:"",exampleHash:""}]},es2017:{title:"ES2017/ES8",features:[{title:"Padding, values and entries",description:"",exampleHash:""},{title:"Await",description:"",exampleHash:""}]},es2018:{title:"ES2018/ES9",features:[{title:"Extended spread operator",description:"",exampleHash:""},{title:"Asyncrhonous iteration",description:"",exampleHash:""}]},es2019:{title:"ES2019",features:[{title:"Flat & flatMap",description:"",exampleHash:""},{title:"Catch",description:"",exampleHash:""},{title:"Object.fromEntries()",description:"",exampleHash:""},{title:"Trim",description:"",exampleHash:""}]}}},33:function(e,t,n){e.exports=n(130)},39:function(e,t,n){}},[[33,1,2]]]);
//# sourceMappingURL=main.4895927f.chunk.js.map