{"version":3,"sources":["components/toc/Toc.js","components/codepen/Codepen.js","components/section-item/SectionItem.js","components/section/Section.js","components/app/App.js","serviceWorker.js","index.js"],"names":["buildSecondLevel","features","react_default","a","createElement","map","feature","key","title","href","concat","tag","Toc","_ref","sourceMap","arrayValues","Object","toConsumableArray","values","react","es","Codepen","hash","name","className","data-height","data-theme-id","data-default-tab","data-slug-hash","data-pen-title","SectionItem","data","id","react_markdown_default","source","description","exampleHash","components_codepen_Codepen","Section","specUrl","target","index_es","icon","faExternalLinkSquareAlt","components_section_item_SectionItem","App","dataMap","Map","entries","Container_default","react_scroll_up_button_default","toc_Toc","section_Section","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53bbb235.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\n\nconst Toc = ({ sourceMap }) => {\n  const arrayValues = [...sourceMap.values()];\n  if (!arrayValues) return;\n\n  return (\n    <Fragment>\n      <h2>Table of contents</h2>\n      <ul>\n        {arrayValues.map(es => (\n          <li key={es.title}>\n            <a href={`#${es.tag}`}>{es.title}</a>\n            {buildSecondLevel(es.features)}\n          </li>\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nconst buildSecondLevel = features => {\n  if (!features) return;\n\n  return (\n    <ul>\n      {features.map(feature => (\n        <li key={feature.title}>\n          <a href={`#${feature.tag}`}>{feature.title}</a>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Toc;\n","import React from \"react\";\n\nimport \"./Codepen.css\";\n\nconst Codepen = ({ hash, name }) => {\n  return (\n    <p\n      className=\"codepen\"\n      data-height=\"280\"\n      data-theme-id=\"0\"\n      data-default-tab=\"js,result\"\n      data-slug-hash={hash}\n      data-pen-title=\"variables\"\n    >\n      <span>\n        See the Pen{\" \"}\n        <a href={`https://codepen.io/sanders-vag/pen/${hash}`}>{name}</a> by\n        mimacom on <a href=\"https://codepen.io\">CodePen</a>.\n      </span>\n    </p>\n  );\n};\n\nexport default Codepen;\n","import React, { Fragment } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\n\nimport Codepen from \"../codepen/Codepen\";\n\nimport \"./SectionItem.css\";\n\nconst SectionItem = ({ data }) => {\n  return (\n    <div>\n      <a id={data.tag} name={data.tag}>\n        <h3>{data.title}</h3>\n      </a>\n      <hr />\n      <h4>Description</h4>\n      <ReactMarkdown source={data.description} />\n      {data.exampleHash && (\n        <Fragment>\n          <h4>Example</h4>\n          <div className=\"example\">\n            <Codepen hash={data.exampleHash} name={data.title} />\n          </div>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default SectionItem;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExternalLinkSquareAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nimport SectionItem from \"../section-item/SectionItem\";\n\nconst Section = ({ data }) => {\n  return (\n    <div>\n      {data.map(es => (\n        <div key={es.title}>\n          <a id={es.tag} name={es.tag}>\n            <h2>\n              {es.title}{\" \"}\n              {es.specUrl && \n              <a\n                target=\"_blank\"\n                title=\"Go to specification\"\n                href={es.specUrl}\n              >\n                <FontAwesomeIcon icon={faExternalLinkSquareAlt} />\n              </a>}\n            </h2>\n          </a>\n          {es.features.map(feature => (\n            <SectionItem key={feature.title} data={feature} />\n          ))}{\" \"}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Section;\n","import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport ScrollUpButton from \"react-scroll-up-button\";\n\nimport Toc from \"../toc/Toc\";\nimport Section from \"../section/Section\";\n\nimport \"./App.css\";\nimport data from \"./sources.json\";\n\nclass App extends Component {\n  render() {\n    const dataMap = new Map(Object.entries(data));\n    const arrayValues = [...dataMap.values()];\n    return (\n      <Container>\n        <ScrollUpButton />\n        <h1>From ES2015 to ES2019</h1>\n        <p>\n          This guide will guide you through the main and most usefule features introduced by each of the EcmaScript specifications. \n        </p>\n        <Toc sourceMap={dataMap} />\n        <Section data={arrayValues} />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}